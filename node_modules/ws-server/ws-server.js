/*var socket_arr = require('../socket_arr');
var gateway_priv = require('../gateway_priv');
var cmdkey = require('cmdkey');
var devConn = require('dev_conn');
*/


/*var mysql   = require('mysql');
var db = require('db');
var client = mysql.createConnection(db.mysql);
 
client.connect();*/

var g_usrConnHash = new Array();

var users=[];
                      
/*function send_gw_result(sock, result) {
    var head = new Buffer([0x00, 0x00, 0x00, 0x00]);

    var len = result.length;

    head[1] = len & 0xff;
    head[0] = (len >> 8) & 0xff;

    sock.write(Buffer.concat([head, new Buffer(result)]));

}*/


/*function send_result(res, msgType, retCode, dataStr) {
    var ret = {
        msgType: msgType,
        ret: retCode,
        data: dataStr,
    };
    console.log(JSON.stringify(ret));
    res.send(JSON.stringify(ret));
}*/




function message_handle(req, res){      
   var message = JSON.parse(req);
    var msgType = message.msgType;
    
    console.log(req);

    if ("login" == msgType) {
        var userId = message.userId;
        var to = message.to;     
        //console.log(userId); 

        if (typeof(userId) == "undefined") {
            return;
        }
     
        g_usrConnHash[userId] = res;

 /*       res.userIndex = users.length;
            res.userId = userId;
            users.push(userId);
            console.log(users);*/


        console.log("欢迎 "+ userId+"进入聊天室")


    } 
       else if("send_history" == msgType){
            var to = message.to;
            //console.log(message.userId);
            if(typeof(to) == "undefined"){
                return;
            }


            var send={
                    msgType:message.msgType,
                    userId:message.userId

            };

            if (g_usrConnHash[to] != "undefined") {
            //console.log("to:"+to+",msg="+JSON.stringify(message));
            g_usrConnHash[to].send(JSON.stringify(send));
        } else {
            console.log(to+"is undefined!");
        }


        }

    else if ("QAsession" == msgType) {
    
        var from = message.from;
        var to = message.to;
     
        if (typeof(from) == "undefined" || typeof(to) == "undefined") {
            return;
        }
        if (g_usrConnHash[userId] != g_usrConnHash[to]) {
         

            //console.log("to:"+to+",msg="+JSON.stringify(message));
           // console.log(g_usrConnHash[to]);

         
            g_usrConnHash[to].send(JSON.stringify(message));


        } else {
            console.log(to+"is offline!");
           res.send("send error");
        }
    } else if ("dev_get" == msgType) {
        var userId = message.userId;
        var deviceType = message.devType;

        if (typeof(userId) == "undefined" || typeof(deviceType) == "undefined") {
            send_result(res, 80001, "参数错误！");
            return;
        }

       
        var selectStr ="SELECT iot_device.deviceId,iot_device.online,iot_device.devData,"
            + "iot_dev_datamodel.dataModelId,iot_dev_datamodel.devDataModel "
            + "FROM iot_device INNER JOIN iot_dev_datamodel ON "
            +"iot_device.deviceDataModelId=iot_dev_datamodel.dataModelId "
            +" WHERE iot_device.deviceId IN(SELECT deviceId FROM dev_user_mapping where userId='"+userId+"')";
            

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            var deviceData = {
                deviceType : deviceType,
                //deviceCount: result[0].rowCount,
                deviceDataModel : [],
                deviceList : []
            };

            for(var i=0; i<result.length; i++) {
                console.log(result[i].devData);

                var dataModelItem = result[i].devDataModel;
                var deviceItem = {
                    deviceId: result[i].deviceId,
                    deviceDataModelId: result[i].dataModelId,
                    online: "1",
                    devData: {},
                    userDevData : {
                        "nickname" : "led2",
                        "group" : "地点",
                    }
                };
                deviceItem.devData=JSON.parse(result[i].devData);
                dataModelItem["deviceDataModelId"] = result[i].dataModelId;
                deviceData.deviceDataModel.push(dataModelItem);
                deviceData.deviceList.push(deviceItem);
            }
            console.log(deviceData);
            res.send(deviceData);
        });


    }
    else if ("dev_get_one" == msgType) {
        var userId = message.userId;
        var deviceId = message.devId;

        if (typeof(userId) == "undefined" || typeof(deviceId) == "undefined") {
            send_result(res, 80001, "参数错误！");
            return;
        }

        var selectStr =  "SELECT "
            + "iot_device.deviceId,iot_device.online,iot_device.devData,"
            + "iot_dev_datamodel.dataModelId,iot_dev_datamodel.devDataModel AS dataModel "
            + "FROM iot_device INNER JOIN iot_dev_datamodel "
            + "ON iot_device.deviceDataModelId=iot_dev_datamodel.dataModelId "
            + "WHERE iot_device.deviceId IN "
            + "(SELECT deviceId FROM dev_user_mapping WHERE userId='"
            + userId + "' AND deviceId='" + deviceId + "');";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length != 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }
            console.log(JSON.parse(result[0].devData));
            console.log(JSON.parse(result[0].dataModel))
            var results={
                deviceId:result[0].deviceId,
                online:result[0].online,
                devData:{},
                dataModel:{},
                dataModelId:result[0].dataModelId

            };
            results.devData=JSON.parse(result[0].devData);
            results.dataModel=JSON.parse(result[0].dataModel);
           

            console.log(JSON.stringify(results));
            //res.send(result[0]);
            res.send(JSON.stringify(results));
        });
    }
    else if ( ("dev_set_dev" == msgType) || ("dev_ctl" == msgType) ) {
        var userId = message.userId;
        var devId = message.devId;

        if (typeof(userId) == "undefined" || typeof(devId) == "undefined") {
            send_result(res, 80001, "参数错误！");
            return;
        }

        var selectStr =  "SELECT  "
            + "iot_dev_datamodel.devDataModel,dev_user_mapping.deviceId,iot_device.online,iot_device.devData,iot_device.gatewayId "
            + "FROM (dev_user_mapping JOIN iot_device ON "
            + "dev_user_mapping.deviceId=iot_device.deviceId) "
            + "LEFT JOIN iot_dev_datamodel ON "
            + "iot_device.deviceDataModelId=iot_dev_datamodel.dataModelId "
            + "WHERE "
            + "dev_user_mapping.deviceId='" + devId + "' AND "
            + "dev_user_mapping.userId='" + userId + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length < 1) {
                send_result(res, 90009, "设备不存在！");
                return;
            }

            if(result.length > 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }

            if(result[0].online == 0) {
                send_result(res, 90003, "设备离线！");
                return;
            }

            /* TODO: datamodel check */
            
            var socket=devConn.getSocketByDevId(result[0].deviceId);
            if (-1 == socket) {
                send_result(res, 90004, "后台与设备连接错误！");
                return;
            }

            var commandId = cmdkey.create();
            var cmdStr= {
                type: "set",
                commandId: commandId,
                userId: userId,
                deviceId: devId,
                devData: {}
            };
            if ("dev_set_dev" == msgType) {
                cmdStr.devData = message.settings;
            } else {
                cmdStr.devData = message.controls;
            }
            console.log(JSON.stringify(cmdStr));
            //socket.write(JSON.stringify(cmdStr)+"\r\n");
            send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");

            send_result(res, 0, "Success!", commandId);
        });
    }
    else if ("dev_bind" == msgType) {
        var userId = message.userId;
        var manufacture = message.manufacture;
        var manufactureSN = message.serialNumber;
        var selectStr =  "SELECT iot_device.deviceId FROM iot_device "
            + "WHERE manufacture='" + manufacture + "' AND manufactureSN='" + manufactureSN + "';";

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length < 1) {
                /* Device has not connect to server */
                var insertStr = "INSERT INTO iot_device(manufacture,manufactureSN) VALUES('"
                                + manufacture + "','" + manufactureSN + "') ";
                client.query(insertStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res, 90006, "设备表插入错误！");
                        return;
                    }

                    if(result.length != 1) {
                        send_result(res, 90006, "设备表插入错误！");
                        return;
                    }


                    var selectStr='select deviceId from iot_device where manufacture="'+result[0].manufacture+'" and manufactureSN="'+manufactureSN+'"';
                    console.log(selectStr);
                client.query(selectStr,function(err,resultId){


               

                    
                    var insertStr = "INSERT INTO dev_user_mapping(deviceId,userId) VALUES('"
                                     + resultId[0].deviceId + "','" + userId + "');";

                    client.query(insertStr, function(err, result) {
                        if (err) {
                            console.error(err.stack);
                            send_result(res, 90007, "设备用户绑定表插入错误！");
                            return;
                        }

                        if(result.length == 1) {
                            send_result(res, 0, "Success!");
                        } else {
                            send_result(res, 90007, "设备用户绑定表插入错误！");
                        }
                         });
                    });
                });
            } else {
                var insertStr = "INSERT INTO dev_user_mapping(deviceId,userId) "
                                + "SELECT '" + resultId[0].deviceId +"','" + userId +"' "
                                + "WHERE NOT EXISTS("
                                + "SELECT deviceId,userId FROM dev_user_mapping "
                                + "WHERE deviceId= '" + resultId[0].deviceId 
                                + "' AND userId='" + userId + "');"

                client.query(insertStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res, 90007, "设备用户绑定表插入错误！");
                        return;
                    }

                    send_result(res, 0, "Success!");
                });
            }
        });
          
    }
    else if ("get_dev_cmd_ret" == msgType) {
        var commandId = message.commandId;
        cmdkey.getRet(commandId.toString(), function(result){
            if(result) {
                if(result=="Success") {
                    send_result(res, 0, "Success!");
                } else if(result=="Start") {
                    send_result(res, 90011, "Waiting for device's response.");
                } else {
                    var err = result;
                    send_result(res, err.ret, err.errStr);
                }
            } else {
                send_result(res, 70005, "设备响应超时!");
            }
        });
    }
    else if ("firmware_query" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT "
            + "firmware_table.publishVersion,iot_device.deviceId,iot_dev_datamodel.firmwareId "
            + "FROM (iot_device JOIN iot_dev_datamodel ON "
            + "iot_device.deviceDataModelId=iot_dev_datamodel.dataModelId) "
            + "LEFT JOIN firmware_table ON "
            + "firmware_table.firmwareId=iot_dev_datamodel.firmwareId "
            + "WHERE iot_device.deviceId='" + devId + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length != 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }

            var firmware_query = {
                ret: 0,
                deviceId: result[0].deviceId,
                newestVersion: result[0].publishVersion,
                firmwareId: result[0].firmwareId
            };

            console.log(firmware_query);
            res.send(JSONfirmware_query);
        });
    }
    else if ("firmware_upgrade" == msgType) {
        var userId = message.userId;
        var devId = message.devId;
        var firmwareId = message.firmwareId;
        var version = message.version;

        var selectStr =  "SELECT "
            + "firmware_version.firmwareId,firmware_version.version,firmware_version.fileName,firmware_version.md5,firmware_table.firmwareDir "
            + "FROM (firmware_version JOIN firmware_table ON "
            + "firmware_version.firmwareId=firmware_table.firmwareId) "
            + "WHERE "
            + "firmware_version.firmwareId='" + firmwareId + "' AND "
            + "firmware_version.version='" + version + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length != 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }

            var socket=devConn.getSocketByDevId(devId);
            if (-1 == socket) {
                send_result(res, 90004, "后台与设备连接错误！");
                return;
            }

            var commandId = cmdkey.create();
            var cmdStr= {
                type: "firmware_upgrade",
                commandId: commandId,
                userId: userId,
                deviceId: devId,
                url:result[0].firmwareDir+result[0].fileName,
                md5:result[0].md5
            };
            console.log(JSON.stringify(cmdStr));
            //socket.write(JSON.stringify(cmdStr)+"\r\n");
            send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");

            send_result(res, 0, "Success!", commandId);
        });
    }
    else if ("plugin_installed" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT count(*) as count "
            + "gateway_plugin.pluginId,gateway_plugin.version,plugin_table.pluginName "
            + "FROM gateway_plugin,plugin_table "
            + "WHERE gateway_plugin.deviceId='" + devId + "' " 
            + "AND gateway_plugin.pluginId=plugin_table.pluginId ";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            var pluginInstalled = {
                ret: 0,
                devId: devId,
                count: result[0].count,
                pluginList : []
            };

            for(var i=0; i<result.length; i++) {
                var pluginItem = {
                    pluginId: result[i].pluginId,
                    currVersion: result[i].version,
                    pluginName: result[i].pluginName
                };
                pluginInstalled.pluginList.push(pluginItem);
            }
            console.log(JSON.stringify(pluginInstalled));
            res.send(JSON.stringify(pluginInstalled));
        });
    }
    else if ("plugin_available" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT count(*) as rowCount pluginId,pluginName, pluginDesc, publishVersion "
            + "FROM plugin_table;"

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            var pluginAvailable = {
                ret: 0,
                devId: devId,
                count: result[0].rowCount,
                pluginList: []
            };

            for(var i=0; i<result.length; i++) {
                var pluginItem = {
                    pluginId: result[i].pluginId,
                    pluginName: result[i].pluginName,
                    pluginDesc: result[i].pluginDesc,
                    publishVersion: result[i].publishVersion
                };
                pluginAvailable.pluginList.push(pluginItem);
            }
            console.log(JSON.stringify(pluginAvailable));
            res.send(JSON.stringify(pluginAvailable));
        });

    }
    else if ("plugin_action" == msgType) {
        var devId = message.devId;
        var action = message.action;
        var pluginIdList = message.pluginList;
        var selectStr = "SELECT * FROM plugin_table WHERE pluginId IN (" + pluginIdList + ");";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length < 1) {
                send_result(res, 90008, "插件不存在！");
                return;
            }

            var fileDownloadList = new Array();
            var fileDeleteList = new Array();
            var count = result.length;

            result.rows.forEach(function(row) {
                var pluginDir = row.pluginDir;
                var version = row.publishVersion;
                var pluginId = row.pluginId;

                var selectNameStr = "SELECT * FROM plugin_version "
                    + "WHERE pluginId='" + pluginId + "' AND version='" + version + "';";

                console.log(selectNameStr);
                
                client.query(selectNameStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res, 90001, "数据库查询错误！");
                        return;
                    }

                    if(result.length < 1) {
                        send_result(res, 90008, "插件不存在！");
                        return;
                    }

                    var fileName = result[0].fileName;

                    var fileLoc = pluginDir + '/' + result[0].version + '/' + fileName;

                    var fileDownloadStr = {
                        url: fileLoc,
                        pluginId: result[0].pluginId,
                        version: result[0].version 
                    };

                    var fileDeleteStr = {
                        name: fileName,
                        pluginId: result[0].pluginId
                    };

                    fileDownloadList.push(fileDownloadStr);
                    fileDeleteList.push(fileDeleteStr);

                    count--;

                    if (count == 0) {
                        var socket=devConn.getSocketByDevId(devId);
                        if (-1 == socket) {
                            send_result(res, 90004, "后台与设备连接错误！");
                            return;
                        }

                        var commandId = cmdkey.create();

                        if ("remove" == action) {
                            var cmdStr= {
                                type: "plugin_action",
                                commandId: commandId,
                                action: 'delete',
                                deviceId: devId,
                                pluginDeleteList: fileDeleteList
                            };
                        }
                        else {
                            var cmdStr= {
                                type: "plugin_action",
                                commandId: commandId,
                                action: action,
                                deviceId: devId,
                                pluginDownloadList: fileDownloadList,
                            };
                        }

                        console.log(JSON.stringify(cmdStr));
                        //socket.write(JSON.stringify(cmdStr));
                        send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");
                        send_result(res, 0, "Success!", commandId);

                    }

                });
            });

        });
    }
    else if("lirc_type_available"== msgType){
        var values = new Array();
        var userId = message.userId;

        var selectStr="SELECT DISTINCT devType "
            + " FROM lirc_device;";

        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,90011,"查询数据库错误！");
                return;
                    
            }
            result.forEach(function(row){
                var value=row.devType;
                values.push(value);

            });

            var lircTypeAvailable={
                ret:0,
                values:values
            };

            console.log(JSON.stringify(lircTypeAvailable));
            res.send(JSON.stringify(lircTypeAvailable));

        });
    }
    else if("lirc_model_available"== msgType){
        var userId = message.userId;
        var devType = message.devType;
        var values = new Array();
       
        var selectStr="SELECT manufacture,modelName FROM lirc_device WHERE devType='"
                        + devType + "' ;";
                       // GROUP BY manufacture
        console.log(selectStr);

        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,9001,"数据库查询错误！");
                return;
            }
            result.forEach(function(row){   
                var value={
                    manufacture:row.manufacture,
                    modelName:row.modelName
                };

                console.log(JSON.stringify(value));
                values.push(value);                 
            });  

            var lircModelAvailable={
                ret:0,
                devType:devType,
                values:values

            };

            console.log(JSON.stringify(lircModelAvailable));
            res.send(JSON.stringify(lircModelAvailable));
        });
    }
    else if("lirc_get_key"== msgType){
        var userId = message.userId;
        var lircId = message.lircId;
        var value;

        var selectStr="SELECT * FROM lirc_device WHERE lircId=' " + lircId + " ' ;";

        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                 console.error(err.stack);
                 send_result(res,1,"数据库查询错误！");
                 return;
            }
            result.forEach(function(row){
                 value=row.keys;
                 console.log(value);
            });

            var lircGetKey={
                 ret:0,
                 lircId:lircId,
                 key:value
            };
            
            console.log(JSON.stringify(lircGetKey));
            res.send(JSON.stringify(lircGetKey));
        });
    } 
    else if ("dev_get_lirc" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr = "SELECT lircData FROM iot_device WHERE deviceId='"
                + devId + "';";

        console.log(selectStr);


        client.query(selectStr, function(err, result) {

            console.log(result);
            if (err) {
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            if (result.length != 1) {
                send_result(res,1,"数据库查询错误！");
                return;
            }

            var retStr = {
                ret: 0,
                deviceId: devId,
                lircData: result[0].lircData
            };
            console.log(retStr.lircData);
            res.send(JSON.stringify(retStr));
        });
    }
    else if("lirc_ctl" == msgType) {
        var userId = message.userId;
        var devId = message.devId;
        var action = message.action;
        var controls = message.controls;

        if ("set" == action) {
            var socket=devConn.getSocketByDevId(devId);
            if (-1 == socket) {
                send_result(res, 90004, "后台与设备连接错误！");
                return;
            }

            var commandId = cmdkey.create();

            var cmdStr = {
                type: 'lirc_emit',
                commandId: commandId,
                deviceId: devId,
                devData: controls
            };

            console.log(JSON.stringify(cmdStr));
            send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");
            send_result(res, 0, "Success!", commandId);

            return;
        }

        var selectStr = "SELECT lircData FROM iot_device WHERE deviceId='"
                + devId + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {

            if (err) {
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            if (result.length != 1) {
                send_result(res,1,"数据库查询错误！");
                return;
            }

            if ("add" == action) {

                console.log(result);
/*修改*/
                /*if (result.rows[0].lircData == 'undefined') {*/ 
                if (!result[0].lircData) {
                    var devList = new Array();
                    result[0].lircData = {
                        count: 0,
                        devList: devList
                    };
                }
                var count = result.lircData.devList.push(controls);
                result[0].lircData.count = count;

                var updateStr = "UPDATE iot_device SET lircData='"
                        + JSON.stringify(result[0].lircData) + "' WHERE deviceId='"
                        + devId + "';";

                console.log(updateStr);

                client.query(updateStr, function(err, result1) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res,1,"数据库操作失败！");
                    }
                    else {
                        send_result(res, 0, "Success!");
                    }
                });
            }
            else if ("delete" == action) {
                var lircData = result[0].lircData;
                var devList = lircData.devList;
                var index = -1;

                for (var i in devList) {
                    if (devList[i].lircId == controls.lircId) {
                        index = i;
                    }
                }

                if (index != -1) {
                    devList.splice(index, 1);
                    result.rows[0].lircData.count--;

                    var updateStr = "UPDATE iot_device SET lircData='"
                        + JSON.stringify(result[0].lircData) + "' WHERE deviceId='"
                        + devId + "';";

                    console.log(updateStr);

                    client.query(updateStr, function(err, result1) {
                        if (err) {
                            console.error(err.stack);
                            send_result(res,1,"数据库操作失败！");
                        }
                        else {
                            send_result(res, 0, "Success!");
                        }
                    });

                }
            }
            else {
                send_result(res,1,"参数错误！");
            }
        });

    }
    else if("lirc_get_lircId"== msgType){
        var manufacture = message.manufacture;
        var modelName = message.modelName;
        var devType = message.devType;
        var value;

        var selectStr="SELECT lircId "
            + "FROM lirc_device WHERE manufacture='" + manufacture + "' AND modelName='" + modelName + "' AND devType='" + devType + "' ;";

        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            console.log(result);


            var lircGetKey={
                ret:0,
                lircId:result[0].lircId,
            };

            console.log(JSON.stringify(lircGetKey));
            res.send(JSON.stringify(lircGetKey));
        });
    }
   /* else if("lirc_set"== msgType){

        var lircId = message.settings.lircId;

        console.log(lircId);

        var selectStr="UPDATA \"lircId\" "
            + "FROM lirc_device WHERE \"manufacture\"='" + manufacture + "' AND \"modelName\"='" + modelName + "' AND \"devType\"='" + devType + "' ;";

        var selectStr1 = "UPDATA lirc_device  SET nickName   WHERE \"lircId\" = "+lircId+";";
        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            console.log(result);


            var lircGetKey={
                ret:0,
                lircId:result.rows[0].lircId,
            };

            console.log(JSON.stringify(lircGetKey));
            res.send(JSON.stringify(lircGetKey));
        });
    }*/
    else if("get_device_map"== msgType){
        var values = new Array();
        var placeDate = new Array();

        var selectStr =" SELECT deviceId ,place,deviceType,connection,devData,online "
                        + "FROM iot_device ; ";
        console.log(selectStr);

        client.query(selectStr,function(err ,result){
            if(err){
                console.error(err.stack);
                send_result(res,'9001',"数据库查询错误！");
                return;
            }
            result.forEach(function(row){
            var retCode={
                devId:row.deviceId,
                place:row.place,
                devType:row.deviceType,
                online:row.online,
                nick_Name:row.devData.name,
                connection:row.connection
                };
                console.log(JSON.stringify(retCode));
                values.push(retCode);
            }); 
            var value= {value:values };
            console.log(JSON.stringify(value));
            res.send(JSON.stringify(value));  
        });
    }
    else if("set_room" == msgType){
        var devId = message.devId;
        var place = message.place;

        var updateStr="UPDATE iot_device SET place='"
                        + place  + "' WHERE deviceId='"
                        + devId + "';";

            console.log(updateStr);
           client.query(updateStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,1,"数据库操作失败！");

            }else{

                send_result(res, 0, "Success!");
            }
        });
    }
}
module.exports.message_handle = message_handle;
